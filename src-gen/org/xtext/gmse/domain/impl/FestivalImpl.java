/**
 * generated by Xtext 2.18.0
 */
package org.xtext.gmse.domain.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.gmse.domain.DomainPackage;
import org.xtext.gmse.domain.Festival;
import org.xtext.gmse.domain.FoodLineup;
import org.xtext.gmse.domain.Lineup;
import org.xtext.gmse.domain.Stagelist;
import org.xtext.gmse.domain.Timetable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Festival</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getVisitors <em>Visitors</em>}</li>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getStartdate <em>Startdate</em>}</li>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getEnddate <em>Enddate</em>}</li>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getLineup <em>Lineup</em>}</li>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getStages <em>Stages</em>}</li>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getTimetable <em>Timetable</em>}</li>
 *   <li>{@link org.xtext.gmse.domain.impl.FestivalImpl#getFoodLineup <em>Food Lineup</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FestivalImpl extends MinimalEObjectImpl.Container implements Festival
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getVisitors() <em>Visitors</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisitors()
   * @generated
   * @ordered
   */
  protected static final int VISITORS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getVisitors() <em>Visitors</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisitors()
   * @generated
   * @ordered
   */
  protected int visitors = VISITORS_EDEFAULT;

  /**
   * The default value of the '{@link #getStartdate() <em>Startdate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartdate()
   * @generated
   * @ordered
   */
  protected static final String STARTDATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStartdate() <em>Startdate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartdate()
   * @generated
   * @ordered
   */
  protected String startdate = STARTDATE_EDEFAULT;

  /**
   * The default value of the '{@link #getEnddate() <em>Enddate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnddate()
   * @generated
   * @ordered
   */
  protected static final String ENDDATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnddate() <em>Enddate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnddate()
   * @generated
   * @ordered
   */
  protected String enddate = ENDDATE_EDEFAULT;

  /**
   * The cached value of the '{@link #getLineup() <em>Lineup</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLineup()
   * @generated
   * @ordered
   */
  protected Lineup lineup;

  /**
   * The cached value of the '{@link #getStages() <em>Stages</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStages()
   * @generated
   * @ordered
   */
  protected Stagelist stages;

  /**
   * The cached value of the '{@link #getTimetable() <em>Timetable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimetable()
   * @generated
   * @ordered
   */
  protected Timetable timetable;

  /**
   * The cached value of the '{@link #getFoodLineup() <em>Food Lineup</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFoodLineup()
   * @generated
   * @ordered
   */
  protected FoodLineup foodLineup;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FestivalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainPackage.Literals.FESTIVAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getVisitors()
  {
    return visitors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisitors(int newVisitors)
  {
    int oldVisitors = visitors;
    visitors = newVisitors;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__VISITORS, oldVisitors, visitors));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStartdate()
  {
    return startdate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartdate(String newStartdate)
  {
    String oldStartdate = startdate;
    startdate = newStartdate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__STARTDATE, oldStartdate, startdate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEnddate()
  {
    return enddate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnddate(String newEnddate)
  {
    String oldEnddate = enddate;
    enddate = newEnddate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__ENDDATE, oldEnddate, enddate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lineup getLineup()
  {
    return lineup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLineup(Lineup newLineup, NotificationChain msgs)
  {
    Lineup oldLineup = lineup;
    lineup = newLineup;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__LINEUP, oldLineup, newLineup);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLineup(Lineup newLineup)
  {
    if (newLineup != lineup)
    {
      NotificationChain msgs = null;
      if (lineup != null)
        msgs = ((InternalEObject)lineup).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__LINEUP, null, msgs);
      if (newLineup != null)
        msgs = ((InternalEObject)newLineup).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__LINEUP, null, msgs);
      msgs = basicSetLineup(newLineup, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__LINEUP, newLineup, newLineup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stagelist getStages()
  {
    return stages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStages(Stagelist newStages, NotificationChain msgs)
  {
    Stagelist oldStages = stages;
    stages = newStages;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__STAGES, oldStages, newStages);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStages(Stagelist newStages)
  {
    if (newStages != stages)
    {
      NotificationChain msgs = null;
      if (stages != null)
        msgs = ((InternalEObject)stages).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__STAGES, null, msgs);
      if (newStages != null)
        msgs = ((InternalEObject)newStages).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__STAGES, null, msgs);
      msgs = basicSetStages(newStages, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__STAGES, newStages, newStages));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Timetable getTimetable()
  {
    return timetable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimetable(Timetable newTimetable, NotificationChain msgs)
  {
    Timetable oldTimetable = timetable;
    timetable = newTimetable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__TIMETABLE, oldTimetable, newTimetable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimetable(Timetable newTimetable)
  {
    if (newTimetable != timetable)
    {
      NotificationChain msgs = null;
      if (timetable != null)
        msgs = ((InternalEObject)timetable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__TIMETABLE, null, msgs);
      if (newTimetable != null)
        msgs = ((InternalEObject)newTimetable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__TIMETABLE, null, msgs);
      msgs = basicSetTimetable(newTimetable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__TIMETABLE, newTimetable, newTimetable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FoodLineup getFoodLineup()
  {
    return foodLineup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFoodLineup(FoodLineup newFoodLineup, NotificationChain msgs)
  {
    FoodLineup oldFoodLineup = foodLineup;
    foodLineup = newFoodLineup;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__FOOD_LINEUP, oldFoodLineup, newFoodLineup);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFoodLineup(FoodLineup newFoodLineup)
  {
    if (newFoodLineup != foodLineup)
    {
      NotificationChain msgs = null;
      if (foodLineup != null)
        msgs = ((InternalEObject)foodLineup).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__FOOD_LINEUP, null, msgs);
      if (newFoodLineup != null)
        msgs = ((InternalEObject)newFoodLineup).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainPackage.FESTIVAL__FOOD_LINEUP, null, msgs);
      msgs = basicSetFoodLineup(newFoodLineup, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainPackage.FESTIVAL__FOOD_LINEUP, newFoodLineup, newFoodLineup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DomainPackage.FESTIVAL__LINEUP:
        return basicSetLineup(null, msgs);
      case DomainPackage.FESTIVAL__STAGES:
        return basicSetStages(null, msgs);
      case DomainPackage.FESTIVAL__TIMETABLE:
        return basicSetTimetable(null, msgs);
      case DomainPackage.FESTIVAL__FOOD_LINEUP:
        return basicSetFoodLineup(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainPackage.FESTIVAL__NAME:
        return getName();
      case DomainPackage.FESTIVAL__VISITORS:
        return getVisitors();
      case DomainPackage.FESTIVAL__STARTDATE:
        return getStartdate();
      case DomainPackage.FESTIVAL__ENDDATE:
        return getEnddate();
      case DomainPackage.FESTIVAL__LINEUP:
        return getLineup();
      case DomainPackage.FESTIVAL__STAGES:
        return getStages();
      case DomainPackage.FESTIVAL__TIMETABLE:
        return getTimetable();
      case DomainPackage.FESTIVAL__FOOD_LINEUP:
        return getFoodLineup();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainPackage.FESTIVAL__NAME:
        setName((String)newValue);
        return;
      case DomainPackage.FESTIVAL__VISITORS:
        setVisitors((Integer)newValue);
        return;
      case DomainPackage.FESTIVAL__STARTDATE:
        setStartdate((String)newValue);
        return;
      case DomainPackage.FESTIVAL__ENDDATE:
        setEnddate((String)newValue);
        return;
      case DomainPackage.FESTIVAL__LINEUP:
        setLineup((Lineup)newValue);
        return;
      case DomainPackage.FESTIVAL__STAGES:
        setStages((Stagelist)newValue);
        return;
      case DomainPackage.FESTIVAL__TIMETABLE:
        setTimetable((Timetable)newValue);
        return;
      case DomainPackage.FESTIVAL__FOOD_LINEUP:
        setFoodLineup((FoodLineup)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainPackage.FESTIVAL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DomainPackage.FESTIVAL__VISITORS:
        setVisitors(VISITORS_EDEFAULT);
        return;
      case DomainPackage.FESTIVAL__STARTDATE:
        setStartdate(STARTDATE_EDEFAULT);
        return;
      case DomainPackage.FESTIVAL__ENDDATE:
        setEnddate(ENDDATE_EDEFAULT);
        return;
      case DomainPackage.FESTIVAL__LINEUP:
        setLineup((Lineup)null);
        return;
      case DomainPackage.FESTIVAL__STAGES:
        setStages((Stagelist)null);
        return;
      case DomainPackage.FESTIVAL__TIMETABLE:
        setTimetable((Timetable)null);
        return;
      case DomainPackage.FESTIVAL__FOOD_LINEUP:
        setFoodLineup((FoodLineup)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainPackage.FESTIVAL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DomainPackage.FESTIVAL__VISITORS:
        return visitors != VISITORS_EDEFAULT;
      case DomainPackage.FESTIVAL__STARTDATE:
        return STARTDATE_EDEFAULT == null ? startdate != null : !STARTDATE_EDEFAULT.equals(startdate);
      case DomainPackage.FESTIVAL__ENDDATE:
        return ENDDATE_EDEFAULT == null ? enddate != null : !ENDDATE_EDEFAULT.equals(enddate);
      case DomainPackage.FESTIVAL__LINEUP:
        return lineup != null;
      case DomainPackage.FESTIVAL__STAGES:
        return stages != null;
      case DomainPackage.FESTIVAL__TIMETABLE:
        return timetable != null;
      case DomainPackage.FESTIVAL__FOOD_LINEUP:
        return foodLineup != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", visitors: ");
    result.append(visitors);
    result.append(", startdate: ");
    result.append(startdate);
    result.append(", enddate: ");
    result.append(enddate);
    result.append(')');
    return result.toString();
  }

} //FestivalImpl
